{%- if is_base_image -%}
# >>>>>>>>>>>>>>>>>>>>>>>>>>>
# Auto-generated by agi-pack (version={{ agipack_version }}).
{%- else %}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>
{%- endif %}
FROM {{ base }} AS {{ target }}


{%- if is_base_image %}

# Setup environment variables
ENV AGIPACK_PROJECT {{ name }}
ENV AGIPACK_PYENV {{ name }}-{{ python_alias }}
ENV AGIPACK_PATH /opt/agi-pack

ENV PYTHON_VERSION {{ python }}
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PYTHONWARNINGS ignore

# Setup conda paths
ENV CONDA_PATH=/opt/conda/envs/${AGIPACK_PYENV}
ENV CONDA_PREFIX=${CONDA_PATH}
ENV CONDA_EXE=${CONDA_PATH}/bin/conda
ENV PATH=${CONDA_PATH}/bin:/opt/conda/bin:$PATH
ENV CONDA_DEFAULT_ENV ${AGIPACK_PYENV}

{%- endif %}


{%- if is_base_image %}

# Install base system packages
RUN apt-get -y update \
    && apt-get -y --no-install-recommends install \
    curl bzip2 git ca-certificates \
    && apt-get -y autoclean \
    && apt-get -y autoremove \
    && rm -rf /var/lib/apt/lists/*

{%- endif %}


{%- if system|length > 0 %}

# Install additional system packages
RUN apt-get -y update \
    && apt-get -y --no-install-recommends install \
{%- for package in system %}
    {{ package }} \
{%- endfor %}
    && apt-get -y autoclean \
    && apt-get -y autoremove \
    && rm -rf /var/lib/apt/lists/*

{%- endif %}


{%- if is_base_image %}

# Install mambaforge
RUN curl -sLo ~/mambaforge.sh "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh" \
  && chmod +x ~/mambaforge.sh \
  && ~/mambaforge.sh -b -p /opt/conda \
  && /opt/conda/bin/mamba init bash \
  && /opt/conda/bin/mamba config --add channels conda-forge \
  && /opt/conda/bin/mamba create -n ${AGIPACK_PYENV} python=${PYTHON_VERSION} -y \
  && rm ~/mambaforge.sh

# Upgrade pip
RUN pip install --upgrade pip
{%- endif %}


{%- if conda|length > 0 %}

# Install conda packages, with cache mounting /opt/conda/pkgs for faster builds
# Note: Cache mounts allow us to re-use the cache for conda packages
# instead of having to re-download them every time we build.
RUN --mount=type=cache,target=/opt/conda/pkgs/ \
    mamba install -yv \
{%- for package in conda %}
    {{ package }} \
{%- endfor %}
    && echo "conda/mamba install complete"

{%- endif %}

{%- if pip|length > 0 %}

# Install pip packages, with cache mounting ~/.cache/pip for faster builds
# Note: Cache mounts allow us to re-use the cache for pip packages
# instead of having to re-download them every time we build.
RUN --mount=type=cache,target=~/.cache/pip \
    pip install \
{%- for package in pip %}
    {{ package }} \
{%- endfor %}
    && echo "pip install complete"

{%- endif %}


{%- if requirements|length > 0 %}

# Install pip requirements, with cache mounting ~/.cache/pip for faster builds
# Note: Cache mounts allow us to re-use the cache for pip packages
# instead of having to re-download them every time we build.
{%- for package in requirements %}
COPY {{ package }} /tmp/reqs/{{ package }}
{%- endfor %}
RUN --mount=type=cache,target=~/.cache/pip \
    pip install --upgrade pip \
{%- for package in requirements %}
    && pip install -r /tmp/reqs/{{ package }} \
{%- endfor %}
    && echo "pip requirements install complete"

{%- endif %}


{%- if is_base_image %}

# Export conda environment on login
RUN echo "export CONDA_PATH=/opt/conda/envs/${AGIPACK_PYENV}" >> ~/.bashrc \
    && echo "export PATH=/opt/conda/envs/${AGIPACK_PYENV}/bin:$PATH" >> ~/.bashrc \
    && echo "export CONDA_DEFAULT_ENV=${AGIPACK_PYENV}" >> ~/.bashrc \
    && echo "mamba activate ${AGIPACK_PYENV}" > ~/.bashrc

{%- if is_prod %}
RUN /opt/conda/bin/mamba clean -ya \
    && rm -rf ~/.cache/pip \
    && rm -rf /opt/conda/pkgs/* \
    && rm -rf /tmp/reqs \
    && echo "pip cleanup complete"
{%- endif %}

{%- endif %}

# Setup working directory
{%- if workdir %}
WORKDIR {{ workdir }}
{%- else %}
WORKDIR /app/$AGIPACK_PYENV
{%- endif %}


{%- if add|length > 0 %}

# Add project files
{%- for item in add %}
ADD {{ item }} {{ item }}
{%- endfor %}

{%- endif %}


{%- if run|length > 0 %}

# Run commands
RUN echo "running commands"
{%- for cmd in run %}
RUN {{ cmd }}
{%- endfor %}
RUN echo "run commands complete"

{%- endif %}


{%- if env|length > 0 %}

# Setup environment variables
{% for key, value in env.items() -%}
ENV {{ key }}={{ value }} {% endfor %}

{%- endif %}


{%- if entrypoint|length > 0 %}
ENTRYPOINT [{%- for cmd in entrypoint %}"{{ cmd }}"{% if not loop.last %}, {% endif %}{%- endfor %}]
{%- endif %}


{%- if command|length > 0 %}
CMD [{%- for cmd in command %}"{{ cmd }}"{% if not loop.last %}, {% endif %}{%- endfor %}]
{%- endif %}
